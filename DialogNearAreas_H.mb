Include "MapBasic.def"
Include "DialogNearAreas.def"

'Include "..\..\..\MapBasic\ActualLabs.MapBasic.SharedDefenition2\UniversalValuesAndType.def"
'Include "..\..\..\MapBasic\ActualLabs.MapBasic.SharedDefenition2\UniversalSubAndFunction.def"
Include "..\..\..\MapBasic\ActualLabs.MapBasic.SharedDefenition2\GeoFunction.def"

'Не редактируйте нижеследующие закомментированные строки!
'//{$DLG_HANDLERS DialogNearAreas.mb}

'//{$BEGIN GLOBALS FOR CONTROL DNA_ResultTableList}
Global DNA_ResultTableList_sTableName As String
Global DNA_ResultTableList_sTablePath As String
Global DNA_ResultTableList_saLayers() As String
Global DNA_ResultTableList_WinID As Integer
Global DNA_ResultTableList_CurrTable As String
Global DNA_ResultTableList_LayerCount As Integer
Global DNA_ResultTableList_I As Integer
'//{$END GLOBALS FOR CONTROL DNA_ResultTableList}

'//{$BEGIN GLOBALS FOR CONTROL DNA_SourceTableList}
Global DNA_SourceTableList_sTableName As String
Global DNA_SourceTableList_sTablePath As String
Global DNA_SourceTableList_saLayers() As String
Global DNA_SourceTableList_WinID As Integer
Global DNA_SourceTableList_CurrTable As String
Global DNA_SourceTableList_LayerCount As Integer
Global DNA_SourceTableList_I As Integer
'//{$END GLOBALS FOR CONTROL DNA_SourceTableList}

Declare Function IniReadString Lib "alDLIB05.DLL" Alias "IniReadString" (ByVal File as String, ByVal Section as String, ByVal Key as String, ByVal DefV as String) As String
Declare Function IniWriteString Lib "alDLIB05.DLL" Alias "IniWriteString" (ByVal File as String, ByVal Section as String, ByVal Key as String, ByVal Value as String) As Integer

Declare Sub LoadIniNear
Declare Sub SaveIniNear
Declare Sub GetDialogElementsNear
Declare Sub SetDialogElementsNear
Declare Sub MainThreadNear

declare Sub SelectTableNear(byval TableName as string, TableColumns(), TypeColumns(), FullColumnsInfo() As String)
declare function getColNumberNear(byval table as string, byval colName as string) as integer
declare Function TableIsOpenNear(byval Name as string) as logical
declare Function ColNumberNear(byval Num as integer, byval Name as string, ColList() as string) as integer

Declare function SelectProjectionNear(byval Metod as string, byval TableName as string, byval WinowsNumber as integer) As string
Declare Sub GetAndSetCoordSysNear(byval TableName as string, byval setType as string)
Declare Function WhatSystemOfCoordinatesNear(byval TablesName as string) as string
Declare Function WhatSystemOfCoordinatesWindowNear(byval WindowName as integer) as string

Declare Function CreateTable() As string

Global Debug As logical

Type ListInfo
   Name as string
   Num as integer
   FieldNum as integer
End Type

Dim realyCoordSys As string

Dim TableColumns_1(0), TypeColumns_1(0), FullColumnsInfo_1(0) As String
Dim TableColumns_2(0), TypeColumns_2(0), FullColumnsInfo_2(0) As String

dim next_row as integer

dim table_source as string
dim field_source_address as ListInfo

dim table_reciver as string
dim field_reciver_address as ListInfo
dim field_reciver_distance as ListInfo
dim field_reciver_angle as ListInfo
dim settings_reciver_utits_distance as ListInfo  ' Num для номера, Name для текста типа "m"
dim settings_reciver_utits_angle as ListInfo  ' Num для номера, Name для текста типа "Румб"

dim round_units_distance as string
dim round_units_distance_m as string
dim round_units_distance_km as string
dim round_units_angle as string

dim result_table as string

Sub DialogNearAreas_OnShow
   Call LoadIniNear

   if Debug then Print "------------------------------------------------" end if

'//{$BEGIN INIT CODE FOR CONTROL DNA_ResultTableList}
   ReDim DNA_ResultTableList_saLayers(0)
   DNA_ResultTableList_WinID = FrontWindow()
   If DNA_ResultTableList_WinID Then
      DNA_ResultTableList_LayerCount = NumTables()
   Else
      DNA_ResultTableList_LayerCount = 0
      Alter Control DNA_ResultTableList Title "-Нет открытых таблиц-" Disable
   End If
   If (NumTables() > 0)AND( DNA_ResultTableList_LayerCount <> 0) Then
      ReDim DNA_ResultTableList_saLayers(DNA_ResultTableList_LayerCount)
      For DNA_ResultTableList_i = 1 to DNA_ResultTableList_LayerCount
         DNA_ResultTableList_saLayers(DNA_ResultTableList_i) = TableInfo(DNA_ResultTableList_i, TAB_INFO_NAME)
      Next
      Alter Control DNA_ResultTableList Title From Variable DNA_ResultTableList_saLayers
   End If
'//{$END INIT CODE FOR CONTROL DNA_ResultTableList}

'//{$BEGIN INIT CODE FOR CONTROL DNA_SourceTableList}
   ReDim DNA_SourceTableList_saLayers(0)
   DNA_SourceTableList_WinID = FrontWindow()
   If DNA_SourceTableList_WinID Then
      DNA_SourceTableList_LayerCount = NumTables()
   Else
      DNA_SourceTableList_LayerCount = 0
      Alter Control DNA_SourceTableList Title "-Нет открытых таблиц-" Disable
   End If
   If (NumTables() > 0)AND( DNA_SourceTableList_LayerCount <> 0) Then
      ReDim DNA_SourceTableList_saLayers(DNA_SourceTableList_LayerCount)
      For DNA_SourceTableList_i = 1 to DNA_SourceTableList_LayerCount
         DNA_SourceTableList_saLayers(DNA_SourceTableList_i) = TableInfo(DNA_SourceTableList_i, TAB_INFO_NAME)
      Next
      Alter Control DNA_SourceTableList Title From Variable DNA_SourceTableList_saLayers
   End If
'//{$END INIT CODE FOR CONTROL DNA_SourceTableList}

   Call DNA_SourceTableList_OnClick
   Call DNA_ResultTableList_OnClick
   Call SetDialogElementsNear

End Sub


Sub DialogNearAreas_OnOKModalResult

End Sub


Sub DialogNearAreas_OnCancelModalResult

End Sub


Sub DNA_btnOK_OnClick
   dim MsgString as string

   Call GetDialogElementsNear
   Call SaveIniNear

   MsgString = "Расчет УПКС..."

   select * from table_reciver into work_table_reciver noselect
   select * from work_table_reciver where work_table_reciver.COL(field_reciver_address.Num) = "" into work_table_reciver noselect

   if Debug then Print "Будет обработано " + str$(TableInfo(work_table_reciver, TAB_INFO_NROWS)) + " строк." end if

   select * from table_source into work_table_source noselect

   if Debug then Print "Поиск выполняетя в таблице с " + str$(TableInfo(work_table_source, TAB_INFO_NROWS)) + " строками." end if

   Call GetAndSetCoordSysNear(table_reciver, "Объект")
   result_table = CreateTable()
   result_table = PathToTableName$(result_table)
   if Debug then print "result_table: " + result_table end if
   
   next_row = 1

   ProgressBar MsgString Calling MainThreadNear Range TableInfo(work_table_reciver, TAB_INFO_NROWS)
   If CommandInfo(CMD_INFO_STATUS) Then
      if TableInfo(work_table_reciver, TAB_INFO_NROWS) > 20 then
         Note "Расчет завершен! Спасибо за терпение."
      end If
   Else
      Note "Операция прервана."
      dialog preserve
   End If

   close table work_table_reciver
   close table work_table_source
   
   Rollback Table result_table
   Drop Table result_table
End Sub


Sub MainThreadNear
   dim start_time as float
   dim firstX, firstY, secondX, secondY, angle, direction, distance, distance_placeholder as float
   dim angle_str, direction_str as string
   dim address as string

   start_time = Timer()

   Fetch Rec next_row From work_table_reciver
   Do While Not EOT(work_table_reciver) And Timer( ) - start_time < 2
      if Debug then print "Object " + str$(next_row) end If

      select * from work_table_reciver where rowid = next_row into one_row_reciver noselect

      Nearest From Table one_row_reciver To work_table_source Into result_table Data COL1 = work_table_source.COL(field_source_address.Num), COL2 = work_table_source.rowid
      select * from result_table into result_table_tmp

      Fetch Last From result_table_tmp

      address = result_table_tmp.COL1
      distance = Objectlen(result_table_tmp.obj, settings_reciver_utits_distance.Name)
      
      if distance > 0 then
         firstX = ObjectNodeX(result_table_tmp.obj, 1, 1)
         firstY = ObjectNodeY(result_table_tmp.obj, 1, 1)
         secondX = ObjectNodeX(result_table_tmp.obj, 1, 2)
         secondY = ObjectNodeY(result_table_tmp.obj, 1, 2)
      else
         firstX = CentroidX(one_row_reciver.obj)
         firstY = CentroidY(one_row_reciver.obj)
         secondX = ObjectNodeX(result_table_tmp.obj, 1, 2)
         secondY = ObjectNodeY(result_table_tmp.obj, 1, 2)
      end if

      Do case settings_reciver_utits_angle.Name
         case "DirAngle"
            Call DirAngle(firstY, secondY, firstX, secondX, angle, distance_placeholder)
            angle = CorrectAngle(angle)
            direction_str = AngleToStringFromGrad(angle, len(round_units_angle) - 1)
         case "Rumb"
            Call RumbAngle(firstY, secondY, firstX, secondX, direction, distance_placeholder, direction_str)
            direction_str = direction_str + AngleToStringFromGrad(direction, len(round_units_angle) - 1)
      end case


      if Debug then
         print "distance: " + str$(distance) + ", firstX: " + str$(firstX) + ", firstY: " + str$(firstY) + ", secondX: " + str$(secondX) + ", secondY: " + str$(secondY)
         print "direction_str: " + direction_str + ", address: " + address
      end if 

      update one_row_reciver set "COL"+field_reciver_address.Num = address, "COL"+field_reciver_distance.Num = Round(distance, val(round_units_distance)), "COL"+field_reciver_angle.Num = direction_str

      close table result_table_tmp
      Rollback table result_table

      Fetch Next From work_table_reciver
      next_row = next_row + 1
      close table one_row_reciver
   Loop

   If next_row > TableInfo(work_table_reciver, TAB_INFO_NROWS) Then
      ProgressBar = -1 ' сообщить "Готово!"
   Else
      ProgressBar = next_row ' сообщить "Прервано."
   End If
End Sub


Sub DNA_btnCancel_OnClick

End Sub


Sub DNA_SourceTableList_OnClick
   If UBound(DNA_SourceTableList_saLayers) > 0 Then
      DNA_SourceTableList_sTableName = DNA_SourceTableList_saLayers(ReadControlValue(DNA_SourceTableList))
      'print "DNA_SourceTableList_sTableName ="+DNA_SourceTableList_sTableName
      Call SelectTableNear(DNA_SourceTableList_sTableName, TableColumns_1, TypeColumns_1, FullColumnsInfo_1)
      Alter Control DNA_SourceTableFieldsList Title From Variable FullColumnsInfo_1
      Alter Control DNA_SourceTableFieldsList Enable
   End If
End Sub


Sub DNA_ResultTableList_OnClick
   If UBound(DNA_ResultTableList_saLayers) > 0 Then
      DNA_ResultTableList_sTableName = DNA_ResultTableList_saLayers(ReadControlValue(DNA_ResultTableList))
      'print "DNA_ResultTableList_sTableName ="+DNA_ResultTableList_sTableName
      Call SelectTableNear(DNA_ResultTableList_sTableName, TableColumns_2, TypeColumns_2, FullColumnsInfo_2)

      Alter Control DNA_ResultTableFieldsList Title From Variable FullColumnsInfo_2
      Alter Control DNA_ResultTableFieldsList Enable

      Alter Control DNA_FieldDistance Title From Variable FullColumnsInfo_2
      Alter Control DNA_FieldDistance Enable

      Alter Control DNA_FieldAngle Title From Variable FullColumnsInfo_2
      Alter Control DNA_FieldAngle Enable
   End If
End Sub


Sub DNA_SourceTableFieldsList_OnClick

End Sub


Sub DNA_ResultTableFieldsList_OnClick

End Sub


Sub DNA_UnitsDistance_OnClick

End Sub


Sub DNA_TypeAngle_OnClick

End Sub


Sub GetDialogElementsNear
   table_source = DNA_SourceTableList_saLayers(ReadControlValue(DNA_SourceTableList))
   field_source_address.Num = ReadControlValue(DNA_SourceTableFieldsList)
   field_source_address.Name = TableColumns_1(ReadControlValue(DNA_SourceTableFieldsList))

   table_reciver = DNA_ResultTableList_saLayers(ReadControlValue(DNA_ResultTableList))
   field_reciver_address.Num = ReadControlValue(DNA_ResultTableFieldsList)
   field_reciver_address.Name = TableColumns_2(ReadControlValue(DNA_ResultTableFieldsList))
   field_reciver_distance.Num = ReadControlValue(DNA_FieldDistance)
   field_reciver_distance.Name = TableColumns_2(ReadControlValue(DNA_FieldDistance))
   field_reciver_angle.Num = ReadControlValue(DNA_FieldAngle)
   field_reciver_angle.Name = TableColumns_2(ReadControlValue(DNA_FieldAngle))

   settings_reciver_utits_distance.Num = ReadControlValue(DNA_UnitsDistance)
   Do case settings_reciver_utits_distance.Num
      case 1
         settings_reciver_utits_distance.Name = "m"
      case 2
         settings_reciver_utits_distance.Name = "km"
   end case

   settings_reciver_utits_angle.Num = ReadControlValue(DNA_TypeAngle)
   Do case settings_reciver_utits_angle.Num
      case 1
         settings_reciver_utits_angle.Name = "DirAngle"
      case 2
         settings_reciver_utits_angle.Name = "Rumb"
   end case

   Do Case settings_reciver_utits_distance.Name
      case "m" round_units_distance = round_units_distance_m
      case "km" round_units_distance = round_units_distance_km
      case else round_units_distance = "0"
   end case

   if round_units_angle = "" then round_units_angle = "10" end if 

   if Debug Then
      Print "table_source: " + table_source
      Print "field_source_address.Num: " + str$(field_source_address.Num)
      Print "field_source_address.Name: " + field_source_address.Name

      Print "table_reciver: " + table_reciver
      Print "field_reciver_address.Num: " + str$(field_reciver_address.Num)
      Print "field_reciver_address.Name: " + field_reciver_address.Name
      Print "field_reciver_distance.Num: " + str$(field_reciver_distance.Num)
      Print "field_reciver_distance.Name: " + field_reciver_distance.Name
      Print "field_reciver_angle.Num: " + str$(field_reciver_angle.Num)
      Print "field_reciver_angle.Name: " + field_reciver_angle.Name

      Print "settings_reciver_utits_distance.Num: " + str$(settings_reciver_utits_distance.Num)
      Print "settings_reciver_utits_distance.Name: " + settings_reciver_utits_distance.Name

      Print "settings_reciver_utits_angle.Num: " + str$(settings_reciver_utits_angle.Num)
      Print "settings_reciver_utits_angle.Name: " + settings_reciver_utits_angle.Name

      Print "round_units_distance: " + str$(round_units_distance)
      Print "round_units_angle: " + str$(round_units_angle)
   End if
End Sub


Sub SetDialogElementsNear
   Dim iTable, ColNum as integer

   if table_source <> "" then
      for iTable = 1 to DNA_SourceTableList_LayerCount
         if DNA_SourceTableList_saLayers(iTable) = table_source then
            ALter Control DNA_SourceTableList Value iTable
            call DNA_SourceTableList_OnClick

            if field_source_address.Num > 0 then
               ColNum = ColNumberNear(field_source_address.Num, field_source_address.Name, TableColumns_1)
               if TableIsOpenNear(table_source) then
                  if (ColNum > 0 and ColNum <= TableInfo(table_source, TAB_INFO_NCOLS)) then Alter Control DNA_SourceTableFieldsList Value ColNum end if
               end if
            end if

         end if
      next
   end if

   if table_reciver <> "" then
      for iTable = 1 to DNA_ResultTableList_LayerCount
         if DNA_ResultTableList_saLayers(iTable) = table_reciver then
            ALter Control DNA_ResultTableList Value iTable
            call DNA_ResultTableList_OnClick

            if field_reciver_address.Num > 0 then
               ColNum = ColNumberNear(field_reciver_address.Num, field_reciver_address.Name, TableColumns_2)
               if TableIsOpenNear(table_reciver) then
                  if (ColNum > 0 and ColNum <= TableInfo(table_reciver, TAB_INFO_NCOLS)) then Alter Control DNA_ResultTableFieldsList Value ColNum end if
               end if
            end if

            if field_reciver_distance.Num > 0 then
               ColNum = ColNumberNear(field_reciver_distance.Num, field_reciver_distance.Name, TableColumns_2)
               if TableIsOpenNear(table_reciver) then
                  if (ColNum > 0 and ColNum <= TableInfo(table_reciver, TAB_INFO_NCOLS)) then Alter Control DNA_FieldDistance Value ColNum end if
               end if
            end if

            if field_reciver_angle.Num > 0 then
               ColNum = ColNumberNear(field_reciver_angle.Num, field_reciver_angle.Name, TableColumns_2)
               if TableIsOpenNear(table_reciver) then
                  if (ColNum > 0 and ColNum <= TableInfo(table_reciver, TAB_INFO_NCOLS)) then Alter Control DNA_FieldAngle Value ColNum end if
               end if
            end if
            
         end if
      next
   end if

   if settings_reciver_utits_distance.Num > 0 then
      Alter Control DNA_UnitsDistance Value settings_reciver_utits_distance.Num
   end if

   if settings_reciver_utits_angle.Num > 0 then
      Alter Control DNA_TypeAngle Value settings_reciver_utits_angle.Num
   end if
End Sub


Sub LoadIniNear
   Dim PachApplicationMBX, FullINIFileName As String
   Dim FormName, KeyString, ValueString As String
   Dim GetIniKey As String

   PachApplicationMBX = ApplicationDirectory$()
   FullINIFileName = PachApplicationMBX + Left$(ApplicationName$(), Len(ApplicationName$()) - 4) + ".ini"

   GetIniKey = IniReadString(FullINIFileName,"Параметры","Debug","T")
   if GetIniKey <> "" Then
       If GetIniKey = "T" Then
          Debug = true
       Else
          Debug = false
       End If
   End If

   GetIniKey = IniReadString(FullINIFileName,"table_source","Name","")
   if GetIniKey <> "" Then
      table_source = GetIniKey
   End If

   GetIniKey = IniReadString(FullINIFileName,"field_source_address","Num","0")
   if GetIniKey <> "" Then
      field_source_address.Num = Val(GetIniKey)
   End If
   GetIniKey = IniReadString(FullINIFileName,"field_source_address","Name","")
   if GetIniKey <> "" Then
      field_source_address.Name = GetIniKey
   End If

   GetIniKey = IniReadString(FullINIFileName,"table_reciver","Name","")
   if GetIniKey <> "" Then
      table_reciver = GetIniKey
   End If

   GetIniKey = IniReadString(FullINIFileName,"field_reciver_address","Num","0")
   if GetIniKey <> "" Then
      field_reciver_address.Num = Val(GetIniKey)
   End If
   GetIniKey = IniReadString(FullINIFileName,"field_reciver_address","Name","")
   if GetIniKey <> "" Then
      field_reciver_address.Name = GetIniKey
   End If

   GetIniKey = IniReadString(FullINIFileName,"field_reciver_distance","Num","0")
   if GetIniKey <> "" Then
      field_reciver_distance.Num = Val(GetIniKey)
   End If
   GetIniKey = IniReadString(FullINIFileName,"field_reciver_distance","Name","")
   if GetIniKey <> "" Then
      field_reciver_distance.Name = GetIniKey
   end if

   GetIniKey = IniReadString(FullINIFileName,"field_reciver_angle","Num","0")
   if GetIniKey <> "" Then
      field_reciver_angle.Num = Val(GetIniKey)
   End If
   GetIniKey = IniReadString(FullINIFileName,"field_reciver_angle","Name","")
   if GetIniKey <> "" Then
      field_reciver_angle.Name = GetIniKey
   end if

   GetIniKey = IniReadString(FullINIFileName,"settings_reciver_utits_distance","Num","0")
   if GetIniKey <> "" Then
      settings_reciver_utits_distance.Num = Val(GetIniKey)
   End If
   GetIniKey = IniReadString(FullINIFileName,"settings_reciver_utits_distance","Name","")
   if GetIniKey <> "" Then
      settings_reciver_utits_distance.Name = GetIniKey
   End If

   GetIniKey = IniReadString(FullINIFileName,"settings_reciver_utits_angle","Num","0")
   if GetIniKey <> "" Then
      settings_reciver_utits_angle.Num = Val(GetIniKey)
   End If
   GetIniKey = IniReadString(FullINIFileName,"settings_reciver_utits_angle","Name","")
   if GetIniKey <> "" Then
      settings_reciver_utits_angle.Name = GetIniKey
   End If

   GetIniKey = IniReadString(FullINIFileName,"round_units","M","0")
   if GetIniKey <> "" Then
      round_units_distance_m = GetIniKey
   End If

   GetIniKey = IniReadString(FullINIFileName,"round_units","KM","0")
   if GetIniKey <> "" Then
      round_units_distance_km = GetIniKey
   End If

   GetIniKey = IniReadString(FullINIFileName,"round_units","Angle","10")
   if GetIniKey <> "" Then
      round_units_angle = GetIniKey
   End If
End Sub


Sub SaveIniNear
    Dim PachApplicationMBX, FullINIFileName As String
    Dim FormName, KeyString, ValueString As String
    Dim SetIniKey As String

    PachApplicationMBX = ApplicationDirectory$()
    FullINIFileName = PachApplicationMBX + Left$(ApplicationName$(), Len(ApplicationName$()) - 4) + ".ini"

   SetIniKey = IniWriteString(FullINIFileName,"Параметры","Debug",str$(Debug))

   SetIniKey = IniWriteString(FullINIFileName,"table_source", "Name",str$(table_source))

   SetIniKey = IniWriteString(FullINIFileName,"field_source_address", "Num",str$(field_source_address.Num))
   SetIniKey = IniWriteString(FullINIFileName,"field_source_address", "Name",str$(field_source_address.Name))

   SetIniKey = IniWriteString(FullINIFileName,"table_reciver", "Name",str$(table_reciver))

   SetIniKey = IniWriteString(FullINIFileName,"field_reciver_address", "Num",str$(field_reciver_address.Num))
   SetIniKey = IniWriteString(FullINIFileName,"field_reciver_address", "Name",str$(field_reciver_address.Name))

   SetIniKey = IniWriteString(FullINIFileName,"field_reciver_distance", "Num",str$(field_reciver_distance.Num))
   SetIniKey = IniWriteString(FullINIFileName,"field_reciver_distance", "Name",str$(field_reciver_distance.Name))

   SetIniKey = IniWriteString(FullINIFileName,"field_reciver_angle", "Num",str$(field_reciver_angle.Num))
   SetIniKey = IniWriteString(FullINIFileName,"field_reciver_angle", "Name",str$(field_reciver_angle.Name))

   SetIniKey = IniWriteString(FullINIFileName,"settings_reciver_utits_distance", "Num",str$(settings_reciver_utits_distance.Num))
   SetIniKey = IniWriteString(FullINIFileName,"settings_reciver_utits_distance", "Name",str$(settings_reciver_utits_distance.Name))

   SetIniKey = IniWriteString(FullINIFileName,"settings_reciver_utits_angle", "Num",str$(settings_reciver_utits_angle.Num))
   SetIniKey = IniWriteString(FullINIFileName,"settings_reciver_utits_angle", "Name",str$(settings_reciver_utits_angle.Name))
End Sub


Sub GetAndSetCoordSysNear(byval TableName as string, byval setType as string)
    If tableinfo(TableName, TAB_INFO_MAPPABLE) = false Then
       'Note "Таблица '" + TableName + "' не содержит графических объектов. Обработка остановлена."
       Exit Sub
    End If
    realyCoordSys = SelectProjectionNear(setType, TableName, FrontWindow())
    'Note realyCoordSys
    If realyCoordSys <> "Ошибка" Then
       'Note "Результат: "  + realyCoordSys
       run command "Set CoordSys " + realyCoordSys
    Else
       'Note "ошибка определения системы координат..."
    end If
    'Print realyCoordSys
End Sub


function SelectProjectionNear(byval Metod as string, byval TableName as string, byval WinowsNumber as integer) As string
   Dim realyTableName As string
   Do Case Metod
      Case "Объект"
           If tableinfo(TableName, TAB_INFO_TEMP) Then
              realyTableName = selectioninfo(SEL_INFO_TABLENAME)
           Else
               realyTableName = TableName
           End If
           realyCoordSys = WhatSystemOfCoordinatesNear(realyTableName)
      Case "Окно"
           realyCoordSys = WhatSystemOfCoordinatesWindowNear(WinowsNumber)
      Case "Выбор"

      Case Else

   End Case
   SelectProjectionNear = realyCoordSys
End Function


Function WhatSystemOfCoordinatesNear (byval TablesName as string) as string
'                   Note tableinfo(TablesName, 3) 'TAB_INFO_TYPE = 3
                        'Note TablesName
         If tableinfo(TablesName, 7) then  ' TAB_INFO_TEMP = 7
            TablesName = tableinfo(TablesName, 12) ' TAB_INFO_MAPPABLE_TABLE = 12
         end if
         WhatSystemOfCoordinatesNear =  mid$(TableInfo(TablesName,29),len("CoordSys") + 2,len(TableInfo(TablesName,29))-len("CoordSys")) 'TAB_INFO_COORDSYS_NAME=30, TAB_INFO_COORDSYS_CLAUSE=29
End Function

Function WhatSystemOfCoordinatesWindowNear (byval WindowName as integer) as string
         'Note WindowName
         'Note MapperInfo(WindowName,22)
         If WindowInfo(WindowName, 3) = 1 then  'WIN_INFO_TYPE=3, WIN_MAPPER=1
            WhatSystemOfCoordinatesWindowNear =  mid$(MapperInfo(WindowName,22),len("CoordSys") + 2,len(MapperInfo(WindowName,22))-len("CoordSys")) 'TAB_INFO_COORDSYS_NAME=30, MAPPER_INFO_COORDSYS_CLAUSE_WITH_BOUNDS=22
         else
            WhatSystemOfCoordinatesWindowNear = "Ошибка"
            Note "Для определения системы координат окна карты, требуется ОКНО КАРТЫ!"
         end If
End Function


Sub SelectTableNear(byval TableName as string, TableColumns(), TypeColumns(), FullColumnsInfo() As String)
     Dim i_counter, j_counter, MaxLen, i_MaxLen, i  As Integer
     Dim SpaceString As String
         ReDim FullColumnsInfo(0)
         ReDim TableColumns(0)
         ReDim TypeColumns(0)
         For i_counter = 1 to NumCols(TableName)
             ReDim TableColumns(UBound(TableColumns)+1)
             ReDim TypeColumns(UBound(TypeColumns)+1)
             TableColumns(i_counter) = ColumnInfo(TableName,"COL"+i_counter,COL_INFO_NAME)
             Do Case  ColumnInfo(TableName,"COL"+i_counter,COL_INFO_TYPE)
                      Case COL_TYPE_CHAR
                           TypeColumns(i_counter) = "Символьный"
                      Case COL_TYPE_DECIMAL
                           TypeColumns(i_counter) = "Десятичный"
                      Case COL_TYPE_FLOAT
                           TypeColumns(i_counter) = "Вещественный"
                      Case COL_TYPE_INTEGER
                           TypeColumns(i_counter) = "Целочисленный (4 байт)"
                      Case COL_TYPE_SMALLINT
                           TypeColumns(i_counter) = "Короткое целое число (2 байт)"
                      Case COL_TYPE_DATE
                           TypeColumns(i_counter) = "Дата"
                      Case COL_TYPE_LOGICAL
                           TypeColumns(i_counter) = "Логический"
                      Case COL_TYPE_GRAPHIC
                           TypeColumns(i_counter) = "Специальный тип колонки (Obj)"
                      Case Else
                           Note "Ошибка чтения таблицы " + TableName
                           Exit Sub
             End Case
         Next
         For i_counter = 1 to NumCols(TableName) - 1
             i_MaxLen = Maximum(Len(TableColumns(i_counter)),Len(TableColumns(i_counter + 1)))
             MaxLen = Maximum(MaxLen,i_MaxLen)
         Next
         For i_counter = 1 to NumCols(TableName)
             ReDim FullColumnsInfo(UBound(FullColumnsInfo)+1)
             SpaceString = ""
             For j_counter = 1 to Fix((MaxLen - Len(TableColumns(i_counter)))*1.8)
                 SpaceString = SpaceString + " "
             Next
             FullColumnsInfo(i_counter) = TableColumns(i_counter) + SpaceString + "  : " + TypeColumns(i_counter)
         Next
End Sub


function getColNumberNear(byval table as string, byval colName as string) as integer
dim iCol as integer

   for iCol = 1 to TableInfo(table, TAB_INFO_NCOLS)
      if UCase$(colName) = UCase$(ColumnInfo(table, "COL"+iCol, COL_INFO_NAME)) then
         getColNumberNear = iCol
         Exit function
      end if
   next

end function


Sub DNA_FieldDistance_OnClick

End Sub


Sub DNA_FieldAngle_OnClick

End Sub


Function ColNumberNear(byval Num as integer, byval Name as string, ColList() as string) as integer
dim iCol as integer
   ' note "Num: " + str$(Num) + ", Name: " + Name + ", ColList: " + str$(UBound(ColList))
   if Num > 0 then
      for iCol = 1 to UBound(ColList)
         if ColList(iCol) = Name then
            ColNumberNear = iCol
            Exit Function
         end if
      next
   Else
      ColNumberNear = 0
   end if
end function


Function TableIsOpenNear(byval Name as string) as logical
Dim i as integer

   for i = 1 to NumTables()
      if Debug then Print "Name: " + Name + ", TAB_INFO_NAME: " + TableInfo(i, TAB_INFO_NAME)        End If
      if TableInfo(i, TAB_INFO_NAME) = Name then
            TableIsOpenNear = true
            Exit Function
      End If
   Next
   TableIsOpenNear = false

   if Debug then Print "Таблица " + Name + " не открыта."        End If
End Function


Function CreateTable() As string
    Dim NameTable, CommandString As string
    NameTable = TempFileName$("")
    NameTable = Left$(NameTable,len(NameTable)-4)+"_result"+".tab"
    Create Table PathToTableName$(NameTable) (Address Char(250), NumRow Integer) File NameTable

    CommandString = "Create Map For " + PathToTableName$(NameTable) + " " + "CoordSys " + realyCoordSys
    if Debug then print "Создание временной таблицы: " + CommandString end if
    Run Command CommandString

    CreateTable = NameTable
End Function